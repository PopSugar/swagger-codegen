{{>licenseInfo}}
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/add/operator/map';
import { APIConfiguration, HTTPCallConfig, ExtraParams, RequestOptions, Hash } from './api-config';

/* tslint:disable:no-unused-variable member-ordering */

{{#operations}}
'use strict';

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Injectable()
export class {{classname}} {
  protected defaultHeaders: Hash  = {} ;

  constructor(protected http: HttpClient, protected config: APIConfiguration) {
    if (!config.{{appName}}) {
      throw new Error('No Config Provider for {{appName}}');
    }
  }

{{#operation}}
  /**
   * {{summary}}
   {{#notes}}*{{ notes}}{{/notes}}
   {{#allParams}}* @param {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}}{{#description}} {{description}}{{/description}}
   {{/allParams}}*/
  public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^isLast}}, {{/isLast}}{{/allParams}}) : Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
    const path = this.config.{{appName}}.basePath + '{{path}}'{{#pathParams}}
      .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

    let queryParameters = {} as Hash;
    let headerParams = {
      ...this.defaultHeaders,
    };
{{#hasFormParams}}
    let formParams: { [key: string]: string } = extraParams || {};
{{/hasFormParams}}
{{#allParams}}
{{#required}}
    // verify required parameter '{{paramName}}' is not null or undefined
    if ({{paramName}} === null || {{paramName}} === undefined) {
      throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
    }

{{/required}}
{{/allParams}}
{{#queryParams}}
    if ({{paramName}} !== undefined) {
      queryParameters['{{baseName}}'] = {{paramName}} as any;
    }

{{/queryParams}}
    if (this.config.{{appName}}.pid) {
      queryParameters.pid = this.config.{{appName}}.pid;
    }
{{^hasFormParams}}

    if (extraParams) {
      queryParameters = {
        ...queryParameters,
        ...extraParams,
      };
    }

{{/hasFormParams}}
{{#headerParams}}
    headerParams['{{baseName}}'] = {{paramName}};
{{/headerParams}}
{{#hasFormParams}}
    headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

{{/hasFormParams}}
{{#formParams}}
    if ({{paramName}}) {
      formParams['{{baseName}}'] = String({{paramName}});
    }

{{/formParams}}
    let requestOptions: RequestOptions = {
      headers: headerParams,
      params: queryParameters,
      responseType: 'json',
    };

    {{#bodyParam}}
    const bodyParams = {{paramName}};
    if (typeof bodyParams === 'string') {
      requestOptions.body = bodyParams;
    } else {
      requestOptions.body = JSON.stringify(bodyParams);
    }

    {{/bodyParam}}
    {{#hasFormParams}}
    requestOptions.body = JSON.stringify(formParams);
    {{/hasFormParams}}
    const interceptor = this.config.{{appName}}.requestInterceptor;
    let requestConfig: HTTPCallConfig = {
      method:'{{httpMethod}}',
      path: path,
      requestOptions: requestOptions,
      className: '{{classname}}',
    };

    if (interceptor) {
      requestConfig = interceptor(requestConfig);
    }

    const responseObservable = this.http.request('{{httpMethod}}', requestConfig.path, requestConfig.requestOptions);

    if (this.config.{{appName}}.responseInterceptor) {
      return this.config.{{appName}}.responseInterceptor(responseObservable, requestConfig);
    }

    return responseObservable;
  }

{{/operation}}
}
{{/operations}}
